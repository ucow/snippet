{
  // Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "new page": {
    "prefix": "vue-common",
    "body": [
      "<template>",
      "  <div>{{ msg }}</div>",
      "</template>",
      "<script>",
      "import { ref, defineComponent } from 'vue'",
      "export default defineComponent({",
      "  name: '$1',",
      "  setup() {",
      "    let msg = ref('')",
      "    return {",
      "      msg,",
      "    }",
      "  },",
      "})",
      "</script>",
      "<style lang=\"less\" scoped>",
      "// TODO",
      "</style>",
      ""
    ],
    "description": "new component"
  },
  "il18n1": {
    "prefix": "t1",
    "body": ["{{\\$t(${CLIPBOARD})}}"],
    "description": "new component"
  },
  "il18n2": {
    "prefix": "t2",
    "body": ["this.\\$t(${CLIPBOARD})"],
    "description": "new component"
  },
  "il18n3": {
    "prefix": "t3",
    "body": ["\\$t(${CLIPBOARD})"],
    "description": "new component"
  },
  "il18n4": {
    "prefix": "t4",
    "body": ["_this.\\$t(${CLIPBOARD})"],
    "description": "new component"
  },
  "il18n5": {
    "prefix": "t5",
    "body": ["that.\\$t(${CLIPBOARD})"],
    "description": "new component"
  },
  "espagecontent": {
    "prefix": "epc",
    "body": [
      "<template>",
      "<e-s-page-content",
      ":columns=\"tableData.columns\"",
      " :rowKey=\"tableData.rowKey\"",
      ":tabs=\"tabs\"",
      ":buttons=\"headButtons\"",
      ":sorter=\"tableData.sortInfo\"",
      ":async-loader=\"asyncLoader\"",
      ":selection=\"tableData.selection\"",
      ":refresh=\"reloadData\"",
      ":search=\"tableData.search\"",
      "ref=\"maintable\"",
      ":autoLoadAtInit=\"false\"",
      ":query-formater=\"queryFormater\"",
      "@selectionChange=\"onSelectionChange\"",
      "@change=\"onTableChange\"",
      "@tabChange=\"onTabChange\"",
      ">",
      "<template #filters>",
      "<span class=\"filter\">",
      "{{ \\$t('view.examination.manage.list.filter.company') }}：",
      " <ESCompanySelect @change=\"onCompanySelectChange\"></ESCompanySelect>",
      "</span>",
      "<CommonPropertyManageSearch",
      "class=\"filter\"",
      ":module=\"tableData.moduleId\"",
      ":noEmitOnLoad=\"true\"",
      "@selectionChange=\"onTypeChange\"",
      " ></CommonPropertyManageSearch>",
      "</template>",
      "<template #operate=\"{ record }\">",
      "<es-button-list",
      " :show-number=\"4\"",
      ":list=\"publishRowButtons\"",
      ":event-data=\"record\"",
      "></es-button-list>",
      " </template>",
      "</e-s-page-content>",
      "</template>",
      "<script>",
      "import { defineComponent } from 'vue';",
      "import stateConstants from '@/utils/constants/state';",
      "export default defineComponent({",
      "  data() {",
      "    return {",
      "      tableData: {",
      "columns: [",
      "{",
      " title: this.\\$t('globe.text.indexNumber'),",
      "dataIndex: 'index',",
      "width: 64,",
      "},",
      "{",
      "title: this.\\$t('globe.text.operation'),",
      "dataIndex: 'operate',",
      " width: 256,",
      "slots: {",
      "customRender: 'operate',",
      "},",
      "},",
      "],",
      "rowKey: '',",
      " sortInfo: {",
      " field: '',",
      "type: 'desc',",
      "},",
      "search: {",
      "enabled: true,",
      "placeholder: '',",
      "onSearch: this.onSearch,",
      "},",
      "selection: {",
      "enabled: true,",
      "},",
      "selectedIds: [],",
      "moduleId: '',",
      "},",
      "filters: {",
      "State: '',",
      "SearchTxt: '',",
      "Company: '',",
      " Property: '',",
      " },",
      "tabs: [",
      "{",
      "id: stateConstants.NORMAL,",
      "name: this.\\$t('view.examination.manage.index.tab.validExam'),",
      "},",
      "{",
      "id: stateConstants.FILE,",
      "name: this.\\$t('globe.text.signin'),",
      "},",
      "{",
      "id: stateConstants.DELETE,",
      "name: this.\\$t('globe.text.recyleStation'),",
      "},",
      "],",
      "};",
      "},",
      "computed: {",
      "headButtons() {",
      "return [",
      "{",
      "type: 'default',",
      "text: '',",
      "onClick: () => {},",
      "permissions: [],",
      "},",
      "];",
      "},",
      "editRowButton() {",
      "return {",
      "text: '',",
      "onClick: () => {},",
      "};",
      "},",
      "},",
      "methods: {",
      "asyncLoader(pageInfo, data) {",
      "return new Promise(resolve => {",
      "resolve({",
      "List: [],",
      "TotalCount: 0,",
      "});",
      "});",
      "},",
      "queryFormater() {",
      "return this.filters;",
      "},",
      "onTableChange() {},",
      "onTabChange(state) {",
      "this.filters.State = state;",
      "this.reloadData();",
      "},",
      " reloadData() {",
      "this.//$refs.maintable.refresh(true);",
      "},",
      "onSearch(searchTxt) {",
      "this.filters.SearchTxt = searchTxt;",
      "this.reloadData();",
      " },",
      "onCompanySelectChange(company) {",
      "this.filters.Company = company ? company.id : null;",
      "this.reloadData();",
      "},",
      "onTypeChange(value) {",
      "this.filters.Property = value;",
      "this.reloadData();",
      "},",
      "},",
      "});",
      "</script>",
      "<style lang=\"less\" scoped>",
      ".filter {",
      "  margin-right: 8px;",
      "}",
      "</style>"
    ],
    "description": "ESPageContent代码段"
  }
}
